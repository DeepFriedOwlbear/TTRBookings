@page
@model IndexModel
@{
    ViewData["Title"] = "Bookings";
}

<table id="myTable" class="table table-hover">
    <thead class="thead-dark">
        <tr>
            <th>Booked Room</th>
            <th>Details Page</th>
        </tr>
    </thead>
    @foreach (var booking in Model.Bookings)
    {
        <!--FORM POST VERSION-->
        <tr>
            <td>@booking.Room.Name</td>
            <td>
                <a asp-page="./Details" asp-route-id="@booking.Id">Details</a> |
                <form id="deleteEntry_@booking.Id" asp-controller="Bookings" asp-action="Delete" method="post">
                    <input id="bookingId" name="bookingId" asp-for="@booking.Id" type="hidden" />
                    <button type="submit">Delete</button>
                </form>
            </td>
        </tr>
        <!--END OF FORM POST VERSION-->

        <!--OLD VERSION-->
        <!--
        <tr>
            <td>@booking.Room.Name</td>
            <td>
                <a asp-page="./Details" asp-route-id="@booking.Id">Details</a> | <a id="deleteEntry" asp-page="./Delete" asp-route-id="@booking.Id">Delete</a>
            </td>
        </tr>-->
        <!--END OF OLD VERSION-->
    }
</table>

@section Scripts
{
    <script type="text/javascript">
        //see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
        //see https://simonplend.com/how-to-use-fetch-to-post-form-data-as-json-to-your-api/

        document.querySelectorAll('[id^="deleteEntry_"]')
            .forEach((element) => {
                element.addEventListener("submit", function () {
                    handleFormSubmit(event, RemoveFromUI);
                });
            });

        function RemoveFromUI(success) {
            if (success) {
                console.log("this is the callback");
            }
        }

        // Event handler for a form submit event.
        async function handleFormSubmit(event, callback) {
            event.preventDefault();

            // This gets the element which the event handler was attached to.
            const form = event.currentTarget;

            // This takes the API URL from the form's `action` attribute.
            const url = form.action;

            try {
                // This takes all the fields in the form and makes their values
                // available through a `FormData` instance.
                const formData = new FormData(form);

                const responseData = await fetch(url,
                    {
                        method: 'POST', // or 'PUT'
                        headers: {
                            'Content-Type': 'application/json',
                            "Accept": "application/json"
                        },
                        body: JSON.stringify(Object.fromEntries(formData)),
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Success:', data);
                        callback(data.success);
                        //return data;
                    })
                    .catch((error) => {
                        console.error('Error:', error);
                    });
            } catch (error) {
                console.error(error);
            }
        }

                //FORM POST VERSION
                //TODO - there's a Content-Type mismatch so form doesn't get processed in Delete.cshtml.cs.

                //const delBtns = document.querySelectorAll('[id^="deleteEntry_"]');

                //for (let i = 0; i < delBtns.length; i++) {
                //    delBtns[i].addEventListener('submit', function () {
                //        event.preventDefault();
                //        const formData = Object.fromEntries(new FormData(delBtns[i]).entries());

                //        fetchData(formData);
                //        //deleteRow(delBtns[i]);
                //    });
                //}

                //async function fetchData(formData) {
                //    let formDataJSON = JSON.stringify(formData)
                //    let formDataParsed = JSON.parse(formDataJSON);
                //    let token = formDataParsed['__RequestVerificationToken'];

                //    console.log("FormData: " + formDataJSON);
                //    console.log("Token: " + token);

                //    await fetch('api/Bookings/Delete', {
                //        method: 'POST',
                //        headers: {
                //            //'Content-Type': 'application/json',
                //            "RequestVerificationToken": token
                //        },
                //        body: formDataJSON
                //    }).then(function (response) {
                //        console.log(response.text());
                //    }).catch(function (error) {
                //        console.log(error);
                //    });
                //}

                //function deleteRow(button) {
                //    var row = button.parentNode.parentNode.parentNode;
                //    row.parentNode.removeChild(row);
                //}
                //END OF FORM POST VERSION

                //OLD VERSION (No Form Post)
                //const delBtns = document.querySelectorAll('#deleteEntry');

                //for (let i = 0; i < delBtns.length; i++) {
                //    delBtns[i].addEventListener('click', function () {
                //        event.preventDefault()

                //        if (confirm("Are you sure you want to delete this entry?") == true) {
                //            fetchData(delBtns[i].getAttribute("href"), delBtns[i]);
                //        }
                //    });
                //}

                //async function fetchData(url, button) {
                //    //console.log("Posted URL: "+url);
                //    let response = await fetch(url);
                //    let data = await response.text();
                //    //console.log("Response: " + data);

                //    var obj = JSON.parse(data);
                //    if (obj["success"] == true) {
                //        var row = button.parentNode.parentNode;
                //        row.parentNode.removeChild(row);
                //    }
                //    else {
                //        alert("Entry could not be deleted.");
                //    }
                //}

                //function deleteRow(button) {
                //    var row = button.parentNode.parentNode;
                //    row.parentNode.removeChild(row);
                //}
                //END OF OLD VERSION

    </script>
    <!--Clicked delete, if response from post to delete onpost method == success = true,
        then delete this entry from the frontend UI-->
    <!--Clicked delete, if response from post to delete onpost method == success = false,
        then display error message to user,
        hint crappy way is to use "alert('message')" frontend UI-->

}